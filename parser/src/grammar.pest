program_lit = _{ "program" }
if_lit = _{ "if" }
then_lit = _{ "then" }
else_lit = _{ "else" }
do_lit = _{ "do" }
done_lit = _{ "done" }
start_at_lit = _{ "start at" }
repeat_lit = _{ "repeat" }
times_lit = _{ "times" }
true_lit = { "true" }
false_lit = { "false" }
boolean = { true_lit | false_lit }
return_lit = _{ "return" }
keywords = _{
  program_lit |
  if_lit |
  then_lit |
  else_lit |
  do_lit |
  done_lit |
  start_at_lit |
  repeat_lit |
  times_lit |
  boolean |
  return_lit
}

equals = _{ "=" }
colon = _{ ":" }
semi = _{ ";" }
plus = { "+" }
minus = { "-" }
multiply = { "*" }
divide = { "/" }
lte = { "<=" }
gte = { ">=" }
lt = { "<" }
gt = { ">" }
infix = _{
  plus |
  minus |
  multiply |
  divide |
  lt |
  lte |
  gt |
  gte
}

lparen = _{ "(" }
rparen = _{ ")" }
comma = _{ "," }
number = @{ "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
}

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* }

raw_string = { (!"\"" ~ ANY)+ }
string = @{ "\"" ~ raw_string ~ "\"" }

unicode = _{ XID_START ~ XID_CONTINUE* }

ident = @{ !keywords ~ unicode+ }

// Actual grammar
goat = { SOI ~ expr? ~ EOI }
expr = { term ~ more_math* }
more_math = _{ infix ~ term }
term = _{ number | ident | string | boolean | declaration | application | function | conditional | lparen ~ expr ~ rparen }
declaration = { ident ~ equals ~ expr ~ expr? }
labels = { ident ~ (comma ~ ident)* }
function = { program_lit ~ lparen ~ labels? ~ rparen ~ do_lit ~ expr? ~ done_lit }
arguments = { expr ~ (comma ~ expr)* }
application = { ident ~ (lparen ~ arguments? ~ rparen)+ }
else_branch = _{ else_lit ~ expr }
conditional = { if_lit ~ expr ~ then_lit ~ expr ~ else_branch? ~ done_lit }
